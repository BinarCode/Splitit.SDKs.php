<?php
/**
 * Merchant
 *
 * PHP version 5
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SplititSdkClient\Model;

use \ArrayAccess;
use \SplititSdkClient\ObjectSerializer;

/**
 * Merchant Class Doc Comment
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Merchant implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Merchant';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'address' => 'string',
        'splitit_merchant_id' => 'string',
        'crm_id' => 'string',
        'business_legal_name' => 'string',
        'business_dba_name' => 'string',
        'business_unit_id' => 'int',
        'on_boarding_status' => 'int',
        'vertical' => '\SplititSdkClient\Model\MerchantVertical',
        'email' => 'string',
        'website_url' => 'string',
        'logo_image_file_content' => 'string',
        'logo_image_file_ext' => 'string',
        'logo_image_url' => 'string',
        'created_date_time' => '\DateTime',
        'transaction_currencies' => '\SplititSdkClient\Model\Currency[]',
        'account_currencies' => '\SplititSdkClient\Model\Currency[]',
        'account_currency_is_transaction_currencies' => 'bool',
        'billing_address' => '\SplititSdkClient\Model\AddressData',
        'vat_tax_id' => 'string',
        'registered_country_of_business_id' => 'string',
        'registered_country_of_business_code' => 'string',
        'registered_state_of_business_id' => 'string',
        'registered_state_of_business_code' => 'string',
        'merchant_country_id' => 'string',
        'merchant_country_code' => 'string',
        'merchant_state_id' => 'string',
        'merchant_state_code' => 'string',
        'bank_details' => '\SplititSdkClient\Model\BankDetails',
        'sales_associate' => '\SplititSdkClient\Model\SalesAssociate',
        'partner' => '\SplititSdkClient\Model\Agent',
        'splitit_current_entity' => '\SplititSdkClient\Model\SplititEntity',
        'splitit_signing_entity' => '\SplititSdkClient\Model\SplititEntity',
        'business_contact' => '\SplititSdkClient\Model\ContactPerson',
        'technical_contact' => '\SplititSdkClient\Model\ContactPerson',
        'financial_contact' => '\SplititSdkClient\Model\ContactPerson'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'name' => null,
        'address' => null,
        'splitit_merchant_id' => null,
        'crm_id' => null,
        'business_legal_name' => null,
        'business_dba_name' => null,
        'business_unit_id' => 'int64',
        'on_boarding_status' => null,
        'vertical' => null,
        'email' => null,
        'website_url' => null,
        'logo_image_file_content' => 'byte',
        'logo_image_file_ext' => null,
        'logo_image_url' => null,
        'created_date_time' => 'date-time',
        'transaction_currencies' => null,
        'account_currencies' => null,
        'account_currency_is_transaction_currencies' => null,
        'billing_address' => null,
        'vat_tax_id' => null,
        'registered_country_of_business_id' => null,
        'registered_country_of_business_code' => null,
        'registered_state_of_business_id' => null,
        'registered_state_of_business_code' => null,
        'merchant_country_id' => null,
        'merchant_country_code' => null,
        'merchant_state_id' => null,
        'merchant_state_code' => null,
        'bank_details' => null,
        'sales_associate' => null,
        'partner' => null,
        'splitit_current_entity' => null,
        'splitit_signing_entity' => null,
        'business_contact' => null,
        'technical_contact' => null,
        'financial_contact' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'name' => 'Name',
        'address' => 'Address',
        'splitit_merchant_id' => 'SplititMerchantId',
        'crm_id' => 'CrmId',
        'business_legal_name' => 'BusinessLegalName',
        'business_dba_name' => 'BusinessDBAName',
        'business_unit_id' => 'BusinessUnitId',
        'on_boarding_status' => 'OnBoardingStatus',
        'vertical' => 'Vertical',
        'email' => 'Email',
        'website_url' => 'WebsiteUrl',
        'logo_image_file_content' => 'LogoImageFileContent',
        'logo_image_file_ext' => 'LogoImageFileExt',
        'logo_image_url' => 'LogoImageUrl',
        'created_date_time' => 'CreatedDateTime',
        'transaction_currencies' => 'TransactionCurrencies',
        'account_currencies' => 'AccountCurrencies',
        'account_currency_is_transaction_currencies' => 'AccountCurrencyIsTransactionCurrencies',
        'billing_address' => 'BillingAddress',
        'vat_tax_id' => 'VatTaxId',
        'registered_country_of_business_id' => 'RegisteredCountryOfBusinessId',
        'registered_country_of_business_code' => 'RegisteredCountryOfBusinessCode',
        'registered_state_of_business_id' => 'RegisteredStateOfBusinessId',
        'registered_state_of_business_code' => 'RegisteredStateOfBusinessCode',
        'merchant_country_id' => 'MerchantCountryId',
        'merchant_country_code' => 'MerchantCountryCode',
        'merchant_state_id' => 'MerchantStateId',
        'merchant_state_code' => 'MerchantStateCode',
        'bank_details' => 'BankDetails',
        'sales_associate' => 'SalesAssociate',
        'partner' => 'Partner',
        'splitit_current_entity' => 'SplititCurrentEntity',
        'splitit_signing_entity' => 'SplititSigningEntity',
        'business_contact' => 'BusinessContact',
        'technical_contact' => 'TechnicalContact',
        'financial_contact' => 'FinancialContact'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'address' => 'setAddress',
        'splitit_merchant_id' => 'setSplititMerchantId',
        'crm_id' => 'setCrmId',
        'business_legal_name' => 'setBusinessLegalName',
        'business_dba_name' => 'setBusinessDbaName',
        'business_unit_id' => 'setBusinessUnitId',
        'on_boarding_status' => 'setOnBoardingStatus',
        'vertical' => 'setVertical',
        'email' => 'setEmail',
        'website_url' => 'setWebsiteUrl',
        'logo_image_file_content' => 'setLogoImageFileContent',
        'logo_image_file_ext' => 'setLogoImageFileExt',
        'logo_image_url' => 'setLogoImageUrl',
        'created_date_time' => 'setCreatedDateTime',
        'transaction_currencies' => 'setTransactionCurrencies',
        'account_currencies' => 'setAccountCurrencies',
        'account_currency_is_transaction_currencies' => 'setAccountCurrencyIsTransactionCurrencies',
        'billing_address' => 'setBillingAddress',
        'vat_tax_id' => 'setVatTaxId',
        'registered_country_of_business_id' => 'setRegisteredCountryOfBusinessId',
        'registered_country_of_business_code' => 'setRegisteredCountryOfBusinessCode',
        'registered_state_of_business_id' => 'setRegisteredStateOfBusinessId',
        'registered_state_of_business_code' => 'setRegisteredStateOfBusinessCode',
        'merchant_country_id' => 'setMerchantCountryId',
        'merchant_country_code' => 'setMerchantCountryCode',
        'merchant_state_id' => 'setMerchantStateId',
        'merchant_state_code' => 'setMerchantStateCode',
        'bank_details' => 'setBankDetails',
        'sales_associate' => 'setSalesAssociate',
        'partner' => 'setPartner',
        'splitit_current_entity' => 'setSplititCurrentEntity',
        'splitit_signing_entity' => 'setSplititSigningEntity',
        'business_contact' => 'setBusinessContact',
        'technical_contact' => 'setTechnicalContact',
        'financial_contact' => 'setFinancialContact'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'address' => 'getAddress',
        'splitit_merchant_id' => 'getSplititMerchantId',
        'crm_id' => 'getCrmId',
        'business_legal_name' => 'getBusinessLegalName',
        'business_dba_name' => 'getBusinessDbaName',
        'business_unit_id' => 'getBusinessUnitId',
        'on_boarding_status' => 'getOnBoardingStatus',
        'vertical' => 'getVertical',
        'email' => 'getEmail',
        'website_url' => 'getWebsiteUrl',
        'logo_image_file_content' => 'getLogoImageFileContent',
        'logo_image_file_ext' => 'getLogoImageFileExt',
        'logo_image_url' => 'getLogoImageUrl',
        'created_date_time' => 'getCreatedDateTime',
        'transaction_currencies' => 'getTransactionCurrencies',
        'account_currencies' => 'getAccountCurrencies',
        'account_currency_is_transaction_currencies' => 'getAccountCurrencyIsTransactionCurrencies',
        'billing_address' => 'getBillingAddress',
        'vat_tax_id' => 'getVatTaxId',
        'registered_country_of_business_id' => 'getRegisteredCountryOfBusinessId',
        'registered_country_of_business_code' => 'getRegisteredCountryOfBusinessCode',
        'registered_state_of_business_id' => 'getRegisteredStateOfBusinessId',
        'registered_state_of_business_code' => 'getRegisteredStateOfBusinessCode',
        'merchant_country_id' => 'getMerchantCountryId',
        'merchant_country_code' => 'getMerchantCountryCode',
        'merchant_state_id' => 'getMerchantStateId',
        'merchant_state_code' => 'getMerchantStateCode',
        'bank_details' => 'getBankDetails',
        'sales_associate' => 'getSalesAssociate',
        'partner' => 'getPartner',
        'splitit_current_entity' => 'getSplititCurrentEntity',
        'splitit_signing_entity' => 'getSplititSigningEntity',
        'business_contact' => 'getBusinessContact',
        'technical_contact' => 'getTechnicalContact',
        'financial_contact' => 'getFinancialContact'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['splitit_merchant_id'] = isset($data['splitit_merchant_id']) ? $data['splitit_merchant_id'] : null;
        $this->container['crm_id'] = isset($data['crm_id']) ? $data['crm_id'] : null;
        $this->container['business_legal_name'] = isset($data['business_legal_name']) ? $data['business_legal_name'] : null;
        $this->container['business_dba_name'] = isset($data['business_dba_name']) ? $data['business_dba_name'] : null;
        $this->container['business_unit_id'] = isset($data['business_unit_id']) ? $data['business_unit_id'] : null;
        $this->container['on_boarding_status'] = isset($data['on_boarding_status']) ? $data['on_boarding_status'] : null;
        $this->container['vertical'] = isset($data['vertical']) ? $data['vertical'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['website_url'] = isset($data['website_url']) ? $data['website_url'] : null;
        $this->container['logo_image_file_content'] = isset($data['logo_image_file_content']) ? $data['logo_image_file_content'] : null;
        $this->container['logo_image_file_ext'] = isset($data['logo_image_file_ext']) ? $data['logo_image_file_ext'] : null;
        $this->container['logo_image_url'] = isset($data['logo_image_url']) ? $data['logo_image_url'] : null;
        $this->container['created_date_time'] = isset($data['created_date_time']) ? $data['created_date_time'] : null;
        $this->container['transaction_currencies'] = isset($data['transaction_currencies']) ? $data['transaction_currencies'] : null;
        $this->container['account_currencies'] = isset($data['account_currencies']) ? $data['account_currencies'] : null;
        $this->container['account_currency_is_transaction_currencies'] = isset($data['account_currency_is_transaction_currencies']) ? $data['account_currency_is_transaction_currencies'] : null;
        $this->container['billing_address'] = isset($data['billing_address']) ? $data['billing_address'] : null;
        $this->container['vat_tax_id'] = isset($data['vat_tax_id']) ? $data['vat_tax_id'] : null;
        $this->container['registered_country_of_business_id'] = isset($data['registered_country_of_business_id']) ? $data['registered_country_of_business_id'] : null;
        $this->container['registered_country_of_business_code'] = isset($data['registered_country_of_business_code']) ? $data['registered_country_of_business_code'] : null;
        $this->container['registered_state_of_business_id'] = isset($data['registered_state_of_business_id']) ? $data['registered_state_of_business_id'] : null;
        $this->container['registered_state_of_business_code'] = isset($data['registered_state_of_business_code']) ? $data['registered_state_of_business_code'] : null;
        $this->container['merchant_country_id'] = isset($data['merchant_country_id']) ? $data['merchant_country_id'] : null;
        $this->container['merchant_country_code'] = isset($data['merchant_country_code']) ? $data['merchant_country_code'] : null;
        $this->container['merchant_state_id'] = isset($data['merchant_state_id']) ? $data['merchant_state_id'] : null;
        $this->container['merchant_state_code'] = isset($data['merchant_state_code']) ? $data['merchant_state_code'] : null;
        $this->container['bank_details'] = isset($data['bank_details']) ? $data['bank_details'] : null;
        $this->container['sales_associate'] = isset($data['sales_associate']) ? $data['sales_associate'] : null;
        $this->container['partner'] = isset($data['partner']) ? $data['partner'] : null;
        $this->container['splitit_current_entity'] = isset($data['splitit_current_entity']) ? $data['splitit_current_entity'] : null;
        $this->container['splitit_signing_entity'] = isset($data['splitit_signing_entity']) ? $data['splitit_signing_entity'] : null;
        $this->container['business_contact'] = isset($data['business_contact']) ? $data['business_contact'] : null;
        $this->container['technical_contact'] = isset($data['technical_contact']) ? $data['technical_contact'] : null;
        $this->container['financial_contact'] = isset($data['financial_contact']) ? $data['financial_contact'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['business_unit_id'] === null) {
            $invalidProperties[] = "'business_unit_id' can't be null";
        }
        if ($this->container['on_boarding_status'] === null) {
            $invalidProperties[] = "'on_boarding_status' can't be null";
        }
        if ($this->container['vertical'] === null) {
            $invalidProperties[] = "'vertical' can't be null";
        }
        if (!is_null($this->container['logo_image_file_content']) && !preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['logo_image_file_content'])) {
            $invalidProperties[] = "invalid value for 'logo_image_file_content', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        if ($this->container['created_date_time'] === null) {
            $invalidProperties[] = "'created_date_time' can't be null";
        }
        if ($this->container['account_currency_is_transaction_currencies'] === null) {
            $invalidProperties[] = "'account_currency_is_transaction_currencies' can't be null";
        }
        if ($this->container['splitit_current_entity'] === null) {
            $invalidProperties[] = "'splitit_current_entity' can't be null";
        }
        if ($this->container['splitit_signing_entity'] === null) {
            $invalidProperties[] = "'splitit_signing_entity' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets splitit_merchant_id
     *
     * @return string
     */
    public function getSplititMerchantId()
    {
        return $this->container['splitit_merchant_id'];
    }

    /**
     * Sets splitit_merchant_id
     *
     * @param string $splitit_merchant_id splitit_merchant_id
     *
     * @return $this
     */
    public function setSplititMerchantId($splitit_merchant_id)
    {
        $this->container['splitit_merchant_id'] = $splitit_merchant_id;

        return $this;
    }

    /**
     * Gets crm_id
     *
     * @return string
     */
    public function getCrmId()
    {
        return $this->container['crm_id'];
    }

    /**
     * Sets crm_id
     *
     * @param string $crm_id crm_id
     *
     * @return $this
     */
    public function setCrmId($crm_id)
    {
        $this->container['crm_id'] = $crm_id;

        return $this;
    }

    /**
     * Gets business_legal_name
     *
     * @return string
     */
    public function getBusinessLegalName()
    {
        return $this->container['business_legal_name'];
    }

    /**
     * Sets business_legal_name
     *
     * @param string $business_legal_name business_legal_name
     *
     * @return $this
     */
    public function setBusinessLegalName($business_legal_name)
    {
        $this->container['business_legal_name'] = $business_legal_name;

        return $this;
    }

    /**
     * Gets business_dba_name
     *
     * @return string
     */
    public function getBusinessDbaName()
    {
        return $this->container['business_dba_name'];
    }

    /**
     * Sets business_dba_name
     *
     * @param string $business_dba_name business_dba_name
     *
     * @return $this
     */
    public function setBusinessDbaName($business_dba_name)
    {
        $this->container['business_dba_name'] = $business_dba_name;

        return $this;
    }

    /**
     * Gets business_unit_id
     *
     * @return int
     */
    public function getBusinessUnitId()
    {
        return $this->container['business_unit_id'];
    }

    /**
     * Sets business_unit_id
     *
     * @param int $business_unit_id business_unit_id
     *
     * @return $this
     */
    public function setBusinessUnitId($business_unit_id)
    {
        $this->container['business_unit_id'] = $business_unit_id;

        return $this;
    }

    /**
     * Gets on_boarding_status
     *
     * @return int
     */
    public function getOnBoardingStatus()
    {
        return $this->container['on_boarding_status'];
    }

    /**
     * Sets on_boarding_status
     *
     * @param int $on_boarding_status on_boarding_status
     *
     * @return $this
     */
    public function setOnBoardingStatus($on_boarding_status)
    {
        $this->container['on_boarding_status'] = $on_boarding_status;

        return $this;
    }

    /**
     * Gets vertical
     *
     * @return \SplititSdkClient\Model\MerchantVertical
     */
    public function getVertical()
    {
        return $this->container['vertical'];
    }

    /**
     * Sets vertical
     *
     * @param \SplititSdkClient\Model\MerchantVertical $vertical vertical
     *
     * @return $this
     */
    public function setVertical($vertical)
    {
        $this->container['vertical'] = $vertical;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets website_url
     *
     * @return string
     */
    public function getWebsiteUrl()
    {
        return $this->container['website_url'];
    }

    /**
     * Sets website_url
     *
     * @param string $website_url website_url
     *
     * @return $this
     */
    public function setWebsiteUrl($website_url)
    {
        $this->container['website_url'] = $website_url;

        return $this;
    }

    /**
     * Gets logo_image_file_content
     *
     * @return string
     */
    public function getLogoImageFileContent()
    {
        return $this->container['logo_image_file_content'];
    }

    /**
     * Sets logo_image_file_content
     *
     * @param string $logo_image_file_content logo_image_file_content
     *
     * @return $this
     */
    public function setLogoImageFileContent($logo_image_file_content)
    {

        if (!is_null($logo_image_file_content) && (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $logo_image_file_content))) {
            throw new \InvalidArgumentException("invalid value for $logo_image_file_content when calling Merchant., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['logo_image_file_content'] = $logo_image_file_content;

        return $this;
    }

    /**
     * Gets logo_image_file_ext
     *
     * @return string
     */
    public function getLogoImageFileExt()
    {
        return $this->container['logo_image_file_ext'];
    }

    /**
     * Sets logo_image_file_ext
     *
     * @param string $logo_image_file_ext logo_image_file_ext
     *
     * @return $this
     */
    public function setLogoImageFileExt($logo_image_file_ext)
    {
        $this->container['logo_image_file_ext'] = $logo_image_file_ext;

        return $this;
    }

    /**
     * Gets logo_image_url
     *
     * @return string
     */
    public function getLogoImageUrl()
    {
        return $this->container['logo_image_url'];
    }

    /**
     * Sets logo_image_url
     *
     * @param string $logo_image_url logo_image_url
     *
     * @return $this
     */
    public function setLogoImageUrl($logo_image_url)
    {
        $this->container['logo_image_url'] = $logo_image_url;

        return $this;
    }

    /**
     * Gets created_date_time
     *
     * @return \DateTime
     */
    public function getCreatedDateTime()
    {
        return $this->container['created_date_time'];
    }

    /**
     * Sets created_date_time
     *
     * @param \DateTime $created_date_time created_date_time
     *
     * @return $this
     */
    public function setCreatedDateTime($created_date_time)
    {
        $this->container['created_date_time'] = $created_date_time;

        return $this;
    }

    /**
     * Gets transaction_currencies
     *
     * @return \SplititSdkClient\Model\Currency[]
     */
    public function getTransactionCurrencies()
    {
        return $this->container['transaction_currencies'];
    }

    /**
     * Sets transaction_currencies
     *
     * @param \SplititSdkClient\Model\Currency[] $transaction_currencies transaction_currencies
     *
     * @return $this
     */
    public function setTransactionCurrencies($transaction_currencies)
    {
        $this->container['transaction_currencies'] = $transaction_currencies;

        return $this;
    }

    /**
     * Gets account_currencies
     *
     * @return \SplititSdkClient\Model\Currency[]
     */
    public function getAccountCurrencies()
    {
        return $this->container['account_currencies'];
    }

    /**
     * Sets account_currencies
     *
     * @param \SplititSdkClient\Model\Currency[] $account_currencies account_currencies
     *
     * @return $this
     */
    public function setAccountCurrencies($account_currencies)
    {
        $this->container['account_currencies'] = $account_currencies;

        return $this;
    }

    /**
     * Gets account_currency_is_transaction_currencies
     *
     * @return bool
     */
    public function getAccountCurrencyIsTransactionCurrencies()
    {
        return $this->container['account_currency_is_transaction_currencies'];
    }

    /**
     * Sets account_currency_is_transaction_currencies
     *
     * @param bool $account_currency_is_transaction_currencies account_currency_is_transaction_currencies
     *
     * @return $this
     */
    public function setAccountCurrencyIsTransactionCurrencies($account_currency_is_transaction_currencies)
    {
        $this->container['account_currency_is_transaction_currencies'] = $account_currency_is_transaction_currencies;

        return $this;
    }

    /**
     * Gets billing_address
     *
     * @return \SplititSdkClient\Model\AddressData
     */
    public function getBillingAddress()
    {
        return $this->container['billing_address'];
    }

    /**
     * Sets billing_address
     *
     * @param \SplititSdkClient\Model\AddressData $billing_address billing_address
     *
     * @return $this
     */
    public function setBillingAddress($billing_address)
    {
        $this->container['billing_address'] = $billing_address;

        return $this;
    }

    /**
     * Gets vat_tax_id
     *
     * @return string
     */
    public function getVatTaxId()
    {
        return $this->container['vat_tax_id'];
    }

    /**
     * Sets vat_tax_id
     *
     * @param string $vat_tax_id vat_tax_id
     *
     * @return $this
     */
    public function setVatTaxId($vat_tax_id)
    {
        $this->container['vat_tax_id'] = $vat_tax_id;

        return $this;
    }

    /**
     * Gets registered_country_of_business_id
     *
     * @return string
     */
    public function getRegisteredCountryOfBusinessId()
    {
        return $this->container['registered_country_of_business_id'];
    }

    /**
     * Sets registered_country_of_business_id
     *
     * @param string $registered_country_of_business_id registered_country_of_business_id
     *
     * @return $this
     */
    public function setRegisteredCountryOfBusinessId($registered_country_of_business_id)
    {
        $this->container['registered_country_of_business_id'] = $registered_country_of_business_id;

        return $this;
    }

    /**
     * Gets registered_country_of_business_code
     *
     * @return string
     */
    public function getRegisteredCountryOfBusinessCode()
    {
        return $this->container['registered_country_of_business_code'];
    }

    /**
     * Sets registered_country_of_business_code
     *
     * @param string $registered_country_of_business_code registered_country_of_business_code
     *
     * @return $this
     */
    public function setRegisteredCountryOfBusinessCode($registered_country_of_business_code)
    {
        $this->container['registered_country_of_business_code'] = $registered_country_of_business_code;

        return $this;
    }

    /**
     * Gets registered_state_of_business_id
     *
     * @return string
     */
    public function getRegisteredStateOfBusinessId()
    {
        return $this->container['registered_state_of_business_id'];
    }

    /**
     * Sets registered_state_of_business_id
     *
     * @param string $registered_state_of_business_id registered_state_of_business_id
     *
     * @return $this
     */
    public function setRegisteredStateOfBusinessId($registered_state_of_business_id)
    {
        $this->container['registered_state_of_business_id'] = $registered_state_of_business_id;

        return $this;
    }

    /**
     * Gets registered_state_of_business_code
     *
     * @return string
     */
    public function getRegisteredStateOfBusinessCode()
    {
        return $this->container['registered_state_of_business_code'];
    }

    /**
     * Sets registered_state_of_business_code
     *
     * @param string $registered_state_of_business_code registered_state_of_business_code
     *
     * @return $this
     */
    public function setRegisteredStateOfBusinessCode($registered_state_of_business_code)
    {
        $this->container['registered_state_of_business_code'] = $registered_state_of_business_code;

        return $this;
    }

    /**
     * Gets merchant_country_id
     *
     * @return string
     */
    public function getMerchantCountryId()
    {
        return $this->container['merchant_country_id'];
    }

    /**
     * Sets merchant_country_id
     *
     * @param string $merchant_country_id merchant_country_id
     *
     * @return $this
     */
    public function setMerchantCountryId($merchant_country_id)
    {
        $this->container['merchant_country_id'] = $merchant_country_id;

        return $this;
    }

    /**
     * Gets merchant_country_code
     *
     * @return string
     */
    public function getMerchantCountryCode()
    {
        return $this->container['merchant_country_code'];
    }

    /**
     * Sets merchant_country_code
     *
     * @param string $merchant_country_code merchant_country_code
     *
     * @return $this
     */
    public function setMerchantCountryCode($merchant_country_code)
    {
        $this->container['merchant_country_code'] = $merchant_country_code;

        return $this;
    }

    /**
     * Gets merchant_state_id
     *
     * @return string
     */
    public function getMerchantStateId()
    {
        return $this->container['merchant_state_id'];
    }

    /**
     * Sets merchant_state_id
     *
     * @param string $merchant_state_id merchant_state_id
     *
     * @return $this
     */
    public function setMerchantStateId($merchant_state_id)
    {
        $this->container['merchant_state_id'] = $merchant_state_id;

        return $this;
    }

    /**
     * Gets merchant_state_code
     *
     * @return string
     */
    public function getMerchantStateCode()
    {
        return $this->container['merchant_state_code'];
    }

    /**
     * Sets merchant_state_code
     *
     * @param string $merchant_state_code merchant_state_code
     *
     * @return $this
     */
    public function setMerchantStateCode($merchant_state_code)
    {
        $this->container['merchant_state_code'] = $merchant_state_code;

        return $this;
    }

    /**
     * Gets bank_details
     *
     * @return \SplititSdkClient\Model\BankDetails
     */
    public function getBankDetails()
    {
        return $this->container['bank_details'];
    }

    /**
     * Sets bank_details
     *
     * @param \SplititSdkClient\Model\BankDetails $bank_details bank_details
     *
     * @return $this
     */
    public function setBankDetails($bank_details)
    {
        $this->container['bank_details'] = $bank_details;

        return $this;
    }

    /**
     * Gets sales_associate
     *
     * @return \SplititSdkClient\Model\SalesAssociate
     */
    public function getSalesAssociate()
    {
        return $this->container['sales_associate'];
    }

    /**
     * Sets sales_associate
     *
     * @param \SplititSdkClient\Model\SalesAssociate $sales_associate sales_associate
     *
     * @return $this
     */
    public function setSalesAssociate($sales_associate)
    {
        $this->container['sales_associate'] = $sales_associate;

        return $this;
    }

    /**
     * Gets partner
     *
     * @return \SplititSdkClient\Model\Agent
     */
    public function getPartner()
    {
        return $this->container['partner'];
    }

    /**
     * Sets partner
     *
     * @param \SplititSdkClient\Model\Agent $partner partner
     *
     * @return $this
     */
    public function setPartner($partner)
    {
        $this->container['partner'] = $partner;

        return $this;
    }

    /**
     * Gets splitit_current_entity
     *
     * @return \SplititSdkClient\Model\SplititEntity
     */
    public function getSplititCurrentEntity()
    {
        return $this->container['splitit_current_entity'];
    }

    /**
     * Sets splitit_current_entity
     *
     * @param \SplititSdkClient\Model\SplititEntity $splitit_current_entity splitit_current_entity
     *
     * @return $this
     */
    public function setSplititCurrentEntity($splitit_current_entity)
    {
        $this->container['splitit_current_entity'] = $splitit_current_entity;

        return $this;
    }

    /**
     * Gets splitit_signing_entity
     *
     * @return \SplititSdkClient\Model\SplititEntity
     */
    public function getSplititSigningEntity()
    {
        return $this->container['splitit_signing_entity'];
    }

    /**
     * Sets splitit_signing_entity
     *
     * @param \SplititSdkClient\Model\SplititEntity $splitit_signing_entity splitit_signing_entity
     *
     * @return $this
     */
    public function setSplititSigningEntity($splitit_signing_entity)
    {
        $this->container['splitit_signing_entity'] = $splitit_signing_entity;

        return $this;
    }

    /**
     * Gets business_contact
     *
     * @return \SplititSdkClient\Model\ContactPerson
     */
    public function getBusinessContact()
    {
        return $this->container['business_contact'];
    }

    /**
     * Sets business_contact
     *
     * @param \SplititSdkClient\Model\ContactPerson $business_contact business_contact
     *
     * @return $this
     */
    public function setBusinessContact($business_contact)
    {
        $this->container['business_contact'] = $business_contact;

        return $this;
    }

    /**
     * Gets technical_contact
     *
     * @return \SplititSdkClient\Model\ContactPerson
     */
    public function getTechnicalContact()
    {
        return $this->container['technical_contact'];
    }

    /**
     * Sets technical_contact
     *
     * @param \SplititSdkClient\Model\ContactPerson $technical_contact technical_contact
     *
     * @return $this
     */
    public function setTechnicalContact($technical_contact)
    {
        $this->container['technical_contact'] = $technical_contact;

        return $this;
    }

    /**
     * Gets financial_contact
     *
     * @return \SplititSdkClient\Model\ContactPerson
     */
    public function getFinancialContact()
    {
        return $this->container['financial_contact'];
    }

    /**
     * Sets financial_contact
     *
     * @param \SplititSdkClient\Model\ContactPerson $financial_contact financial_contact
     *
     * @return $this
     */
    public function setFinancialContact($financial_contact)
    {
        $this->container['financial_contact'] = $financial_contact;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


